package builder.navigation;

/**
 * http://www.jianshu.com/p/570d8bddb5c0
 * <p>
 * 这样一系列的构造函数主要目的就是为了提供更多的客户调用选择，以处理不同的构造请求。
 * 这种方法很常见，也很有效力，但是它的缺点也很多。
 * 类的作者不得不书写多种参数组合的构造函数，而且其中还需要设置默认参数值，这是一个需要细心而又枯燥的工作。
 * 其次，这样的构造函数灵活性也不高，而且在调用时你不得不提供一些没有意义的参数值，
 * 例如，DoDoContact("Ace", -1, "SH")，显然年龄为负数没有意义，但是你又不的不这样做，得以符合Java的规范。
 * 如果这样的代码发布后，后面的维护者就会很头痛，因为他根本不知道这个-1是什么含义。
 * 对于这样的情况，就非常适合使用Builder模式。
 * Builder模式的要点就是通过一个代理来完成对象的构建过程。
 * 这个代理职责就是完成构建的各个步骤，同时它也是易扩展的。\
 * <p>
 * 模式的定义
 * <p>
 * 将一个复杂对象的构建与它的表示分离，使得不同的构建过程可以创建不同的显示，但其根本还是不变。
 * <p>
 * 模式的使用场景
 * <p>
 * 1.相同的方法，不同的执行顺序，产生不同的事件结果时；
 * 2.多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时；
 * 3.产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能，这个时候使用建造者模式非常合适。
 * <p>
 * <p>
 * description：定义导航条规范
 * <p>
 * Created by 曾辉 on 2016/6/30 22:35
 * QQ：240336124
 * Email: 240336124@qq.com
 * Version：1.0
 */
public interface INavigation {

    // 绑定布局ID
    public int bindLayoutId();

    // 给View设置参数
    public void applyView();
}